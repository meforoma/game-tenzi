{"version":3,"sources":["components/Die.tsx","App.tsx","index.tsx"],"names":["Die","props","die","isHeld","value","styles","backgroundColor","type","className","style","onClick","holdDice","App","useState","generateDice","dice","setDice","userWon","setUserWon","rollsCount","bestRolls","localStorage","getItem","stats","setStats","generateDie","Math","ceil","random","id","nanoid","newDice","i","push","useEffect","allHeld","every","allSameValue","prevBestRolls","setItem","toString","diceElements","map","oldDice","prevStats","ReactDOM","render","document","getElementById"],"mappings":"sPAOaA,EAAM,SAACC,GAClB,MAA0BA,EAAMC,IAAxBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAEVC,EAAS,CACbC,gBAAiBH,EAAS,UAAY,SAGxC,OACE,wBACEI,KAAK,SACLC,UAAU,WACVC,MAAOJ,EACPK,QAAST,EAAMU,SAJjB,SAME,oBAAIH,UAAU,UAAd,SAAyBJ,OCdlBQ,EAAM,WACjB,MAAwBC,mBAASC,KAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEA,EAA0BL,mBAAS,CACjCM,WAAY,EACZC,UAAWC,aAAaC,QAAQ,eAFlC,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,SAASC,IACP,MAAO,CACLrB,MAAOsB,KAAKC,KAAqB,EAAhBD,KAAKE,UACtBzB,QAAQ,EACR0B,GAAIC,eAIR,SAAShB,IAGP,IAFA,IAAMiB,EAAU,GAEPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAQE,KAAKR,KAGf,OAAOM,EA9BTG,qBAAU,WACR,IAAMC,EAAUpB,EAAKqB,OAAM,SAAAlC,GAAG,OAAIA,EAAIC,UAChCkC,EAAetB,EAAKqB,OAAM,SAAAlC,GAAG,OAAIA,EAAIE,QAAUW,EAAK,GAAGX,SAE7D,GAAI+B,GAAWE,EAAc,CAC3BnB,GAAW,GAEX,IAAMoB,EAAgBjB,aAAaC,QAAQ,cAAgB,IAEvDC,EAAMJ,YAAcmB,GACtBjB,aAAakB,QAAQ,YAAahB,EAAMJ,WAAWqB,eAGtD,CAACzB,IA4DJ,IAAM0B,EAAe1B,EAAK2B,KAAI,SAAAxC,GAAG,OAC/B,cAAC,EAAD,CAEEA,IAAKA,EACLS,SAAU,kBAZIkB,EAYW3B,EAAI2B,QAX/Bb,GAAQ,SAAA2B,GAAO,OAAIA,EAAQD,KAAI,SAAAxC,GAAG,OAChCA,EAAI2B,KAAOA,EAAX,2BACS3B,GADT,IACcC,QAASD,EAAIC,SACvBD,QAJR,IAAkB2B,IAUTC,kBAMT,OACE,iCACGb,GAAW,cAAC,IAAD,IACZ,oBAAIT,UAAU,QAAd,wBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,cAAf,wBAEG,IACAe,EAAMH,eAIX,mBAAGZ,UAAU,eAAb,iHAKA,qBAAKA,UAAU,iBAAf,SACGiC,IAGH,wBACElC,KAAK,SACLC,UAAU,YACVE,QAzDN,WACMO,GACFC,GAAW,GACXF,EAAQF,KATVU,EAAS,CACPL,WAAY,EACZC,UAAWC,aAAaC,QAAQ,iBAUhCN,GAAQ,SAAA2B,GAAO,OAAIA,EAAQD,KAAI,SAAAxC,GAAG,OAChCA,EAAIC,OACAD,EACAuB,UAxBRD,GAAS,SAAAoB,GAAS,kCAEXA,GAFW,IAGdzB,WAAYyB,EAAUzB,WAAa,SAkErC,SAKGF,EAAU,WAAa,aCzHhC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dba721b5.chunk.js","sourcesContent":["import { DieType } from '../types/types';\n\ntype Props = {\n  die: DieType,\n  holdDice: () => void,\n};\n\nexport const Die = (props: Props) => {\n  const { isHeld, value } = props.die;\n\n  const styles = {\n    backgroundColor: isHeld ? '#59E391' : 'white',\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"die-face\"\n      style={styles}\n      onClick={props.holdDice}\n    >\n      <h2 className=\"die-num\">{value}</h2>\n    </button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './styles/general.scss';\n\nimport { nanoid } from 'nanoid';\nimport Confetti from 'react-confetti';\nimport { Die } from './components/Die';\n\nexport const App = () => {\n  const [dice, setDice] = useState(generateDice());\n  const [userWon, setUserWon] = useState(false);\n\n  const [stats, setStats] = useState({\n    rollsCount: 0,\n    bestRolls: localStorage.getItem('bestRolls'),\n  });\n\n  useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld);\n    const allSameValue = dice.every(die => die.value === dice[0].value);\n\n    if (allHeld && allSameValue) {\n      setUserWon(true);\n\n      const prevBestRolls = localStorage.getItem('bestRolls') || 100;\n\n      if (stats.rollsCount < +prevBestRolls) {\n        localStorage.setItem('bestRolls', stats.rollsCount.toString());\n      }\n    }\n  }, [dice]);\n\n  function generateDie() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid(),\n    };\n  }\n\n  function generateDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateDie());\n    }\n\n    return newDice;\n  }\n\n  const increaseRollCount = () => {\n    setStats(prevStats => (\n      {\n        ...prevStats,\n        rollsCount: prevStats.rollsCount + 1,\n      }\n    ));\n  };\n\n  const resetStats = () => {\n    setStats({\n      rollsCount: 0,\n      bestRolls: localStorage.getItem('bestRolls'),\n    });\n  };\n\n  function buttonClick() {\n    if (userWon) {\n      setUserWon(false);\n      setDice(generateDice());\n      resetStats();\n    } else {\n      setDice(oldDice => oldDice.map(die => (\n        die.isHeld\n          ? die\n          : generateDie()\n      )));\n\n      increaseRollCount();\n    }\n  }\n\n  function holdDice(id: string) {\n    setDice(oldDice => oldDice.map(die => (\n      die.id === id\n        ? { ...die, isHeld: !die.isHeld }\n        : die\n    )));\n  }\n\n  const diceElements = dice.map(die => (\n    <Die\n      key={nanoid()}\n      die={die}\n      holdDice={() => holdDice(die.id)}\n    />\n  ));\n\n  return (\n    <main>\n      {userWon && <Confetti />}\n      <h1 className=\"title\">Tenzi game</h1>\n\n      <div className=\"stats\">\n        <div className=\"stats-rolls\">\n          Best rolls:\n          {' '}\n          {stats.bestRolls}\n        </div>\n      </div>\n\n      <p className=\"instructions\">\n        Roll and freeze until all dice are of the same value.\n        Click die to freeze/unfreeze it from rolling.\n      </p>\n\n      <div className=\"dice-container\">\n        {diceElements}\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"roll-dice\"\n        onClick={buttonClick}\n      >\n        {userWon ? 'New Game' : 'Roll'}\n      </button>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}